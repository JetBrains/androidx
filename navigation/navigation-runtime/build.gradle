/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */

import androidx.build.JetbrainsAndroidXPlugin
import androidx.build.PlatformIdentifier
import androidx.build.Publish
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    alias(libs.plugins.kotlinSerialization)
    id("JetbrainsAndroidXPlugin")
}

JetbrainsAndroidXPlugin.applyAndConfigure(project)

androidXMultiplatform {
    android()
    desktop()
    mac()
    linux()
    ios()
    js()
    wasm()

    defaultPlatform(PlatformIdentifier.ANDROID)
}

kotlin {
    js {
        browser()
    }
    wasmJs()

    watchosArm64()
    watchosArm32()
    watchosX64()
    watchosSimulatorArm64()
    tvosArm64()
    tvosX64()
    tvosSimulatorArm64()

    sourceSets {
        commonMain {
            dependencies {
                api project(":annotation:annotation")
                implementation project(":collection:collection")
                api "org.jetbrains.androidx.core:core-bundle:1.0.0"
                api "org.jetbrains.androidx.lifecycle:lifecycle-common:2.8.0"
                api "org.jetbrains.androidx.lifecycle:lifecycle-runtime:2.8.0"
                api "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel:2.8.0"
                api "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-savedstate:2.8.0"
                api project(":navigation:navigation-common")
                api "org.jetbrains.androidx.savedstate:savedstate:1.2.0"

                api(libs.kotlinStdlib)
                implementation(libs.kotlinSerializationCore)
            }
        }

        commonTest {
            dependencies {
                implementation(libs.kotlinStdlib)
                implementation(libs.kotlinTest)
            }
        }

        jvmMain {
            dependsOn(commonMain)
        }

        androidMain {
            dependsOn(jvmMain)
            dependencies {
                api("androidx.activity:activity-ktx:1.7.1")
            }
        }

        androidInstrumentedTest {
            dependsOn(commonTest)
            dependencies {
//                implementation(project(":navigation:navigation-testing"))
                implementation(project(":internal-testutils-navigation"))
                implementation(project(":internal-testutils-runtime"))
                implementation(libs.testExtJunit)
                implementation(libs.testExtTruth)
                implementation(libs.testCore)
                implementation(libs.testRunner)
                implementation(libs.testRules)
                implementation(libs.espressoCore)
                implementation(libs.espressoIntents)
                implementation(libs.truth)
                implementation(libs.multidex)

                // CustomMessageMissingMethodException: Could not find method implementation() for arguments
                // implementation(libs.mockitoCore, excludes.bytebuddy)
                // implementation(libs.dexmakerMockito, excludes.bytebuddy)
                implementation("org.mockito:mockito-core:2.25.0", excludes.bytebuddy)
                implementation("com.linkedin.dexmaker:dexmaker-mockito:2.28.3", excludes.bytebuddy)
            }
        }

        jbMain.dependsOn(commonMain)

        nonJvmMain {
            dependsOn(jbMain)
            dependencies {
                implementation(libs.atomicFu)
            }
        }

        desktopMain {
            dependsOn(jvmMain)
            dependsOn(jbMain)
        }

        targets.all { target ->
            if (target.platformType !in [
                    KotlinPlatformType.androidJvm,
                    KotlinPlatformType.jvm,
                    KotlinPlatformType.common
            ]) {
                target.compilations["main"].defaultSourceSet {
                    dependsOn(nonJvmMain)
                }
            }
        }
    }
}

android {
    // Include `*.java` files into the build
    sourceSets["main"].java.srcDir("src/androidMain/java")
    namespace "androidx.navigation"
}

androidx {
    name = "Navigation Runtime"
    publish = Publish.SNAPSHOT_AND_RELEASE
    inceptionYear = "2017"
    description = "Android Navigation-Runtime"
    metalavaK2UastEnabled = true
    legacyDisableKotlinStrictApiMode = true
}
