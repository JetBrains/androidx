/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */

import androidx.build.AndroidXComposePlugin
import androidx.build.Publish
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType

plugins {
    id("AndroidXPlugin")
    id("kotlinx-atomicfu")
    //  TODO move all functionality to Compose-independent plugin (`collection` shouldn't depend on Compose concepts)
    id("AndroidXComposePlugin")
}

AndroidXComposePlugin.applyAndConfigureKotlinPlugin(project)

androidXComposeMultiplatform {
    js()
    wasm()
    darwin()

    linuxX64()
    linuxArm64()
}

kotlin {
    jvm {
        withJava()
    }
    // Not all modules can have these targets, so declare them here instead of androidXComposeMultiplatform.
    // We can support the kotlin-native targets supported by kotlin coroutines:
    // https://github.com/Kotlin/kotlinx.coroutines/blob/master/gradle/compile-native-multiplatform.gradle
    // NOTE: Keep this list in sync with runtime-saveable's targets.
    watchosArm64()
    watchosArm32()
    watchosX64()
    watchosSimulatorArm64()
    tvosArm64()
    tvosX64()
    tvosSimulatorArm64()
    mingwX64()

    sourceSets {
        commonMain {
            dependencies {
                api(libs.kotlinStdlib)
                api(libs.kotlinCoroutinesCore)
                api(project(":annotation:annotation"))
            }
        }

        jvmMain {
            dependsOn(commonMain)
        }

        jvmTest {
            dependencies {
                implementation(libs.junit)
                implementation(libs.mockitoCore4)
            }
        }

        nonJvmMain {
            dependsOn(commonMain)
            dependencies {
                implementation(libs.atomicFu)
            }
        }

        targets.all { target ->
            if (target.platformType !in [KotlinPlatformType.jvm, KotlinPlatformType.common]) {
                target.compilations["main"].defaultSourceSet {
                    dependsOn(nonJvmMain)
                }
            }
        }

    }
}
//
//def macEnabled = KmpPlatformsKt.enableMac(project)
//def linuxEnabled = KmpPlatformsKt.enableLinux(project)
//def jsEnabled = KmpPlatformsKt.enableJs(project)
//def wasmEnabled = KmpPlatformsKt.enableWasm(project)
//
//androidXMultiplatform {
//    jvm {
//        withJava()
//    }
//    mac()
//    linux()
//    ios()
//}
//
//kotlin {
//    js {
//        browser()
//    }
//    wasmJs()
//
//    sourceSets {
//        commonMain {
//            dependencies {
//                api(libs.kotlinStdlib)
//                api(libs.kotlinCoroutinesCore)
//                api(project(":annotation:annotation"))
//            }
//        }
//
//        jvmMain {
//            dependsOn(commonMain)
//        }
//
//        jvmTest {
//            dependencies {
//                implementation(libs.junit)
//                implementation(libs.mockitoCore4)
//            }
//        }
//
//        if (macEnabled || linuxEnabled || jsEnabled || wasmEnabled) {
//            nonJvmMain {
//                dependsOn(commonMain)
//                dependencies {
//                    implementation(libs.atomicFu)
//                }
//            }
//        }
//
//        targets.all { target ->
//            if (target.platformType !in [KotlinPlatformType.jvm, KotlinPlatformType.common]) {
//                target.compilations["main"].defaultSourceSet {
//                    dependsOn(nonJvmMain)
//                }
//            }
//        }
//    }
//}

androidx {
    name = "Lifecycle-Common"
    publish = Publish.SNAPSHOT_AND_RELEASE
    inceptionYear = "2017"
    description = "Android Lifecycle-Common"
    metalavaK2UastEnabled = true
}

androidxCompose {
    composeCompilerPluginEnabled = false
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
